import asyncio
import webbrowser
from asyncio import Queue

import httpx
import telebot
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from fastapi import Request, Query
# from telebot import types
# import keyboards as kb
import facebook_auth
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import logging

logging.basicConfig(level=logging.INFO)
my_app_id = '323958937015510'
my_app_secret = '4017320d9d5dcc49869874e73904b872'
fs = facebook_auth.FacebookAuth(my_app_id, my_app_secret, "http://localhost:5000/login/callback", "email")
# bot = telebot.TeleBot("6713056294:AAFAr-2ipWydHjlsiXgKPuxGI-YmeGStvOQ")
greet_kb = ReplyKeyboardMarkup()
bot = Bot(token="6713056294:AAFAr-2ipWydHjlsiXgKPuxGI-YmeGStvOQ")
dp = Dispatcher(bot)
FastAPI = FastAPI
class TelegramBot:
    @dp.message_handler(commands=['start'])
    async def process_start_command(message: types.Message):
        kb = [
            [types.KeyboardButton(text="üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏")],
            [types.KeyboardButton(text="‚ùì –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–≥–µ—Ç–∞!", reply_markup=keyboard)

    @dp.message_handler(content_types=['text'])
    async def start_work(message: types.Message):
        if message.text == "üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏":
            kb = [
                [types.KeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS")]
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
            await message.answer("–ù–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook", reply_markup=keyboard)

        if message.text == "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS":
            data_queue = Queue()
            # –ü–æ–º–µ—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥—å –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            data_queue.put("05/01/2024")
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
            webbrowser.open('https://localhost:5000/')
            await message.answer("–ù–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook")

    @dp.message_handler(lambda message: message.text.lower() == "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS")
    async def facebook(message: types.Message):
        asyncio.create_task(facebook_auth.read_root())
        await message.answer("–ù–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook")


    @dp.message_handler(lambda message: message.text and "‚ùì –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ" in message.text.lower())
    async def info(message: types.Message):
        await message.reply("–ù–∞—à —Å–µ—Ä–≤–∏—Å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è ...")

    def run(self):
        executor.start_polling(dp, skip_updates=True)
    #     @self.bot.message_handler(commands=['start'])
    #     def start(message):
    #         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #         btn1 = types.KeyboardButton("üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏")
    #         btn2 = types.KeyboardButton("‚ùì –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ")
    #         markup.add(btn1, btn2)
    #         self.bot.send_message(message.chat.id,
    #                               text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–≥–µ—Ç–∞".format(
    #                                   message.from_user), reply_markup=markup)
    #
    #     @self.bot.message_handler(content_types=['text'])
    #     def func(message):
    #         back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    #         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #
    #         if message.text == "üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏":
    #             btn1 = types.KeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS")
    #             markup.add(btn1)
    #             self.bot.send_message(message.chat.id,
    #                                   text="–£–≤–∞–∂–∞–µ–º—ã–π, {0.first_name}! –ù–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook".format(
    #                                       message.from_user), reply_markup=markup)
    #         elif message.text == "‚ùì –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ":
    #             self.bot.send_message(message.chat.id, text="–ù–∞—à —Å–µ—Ä–≤–∏—Å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è ...")
    #             btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
    #             btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
    #             markup.add(btn1, btn2, back)
    #             self.bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)
    #         elif message.text == "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS":
    #             markup = types.ReplyKeyboardMarkup(row_width=1)
    #             item = types.KeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ Facebook ADS")
    #             markup.add(item)
    #             btn1 = types.KeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
    #             markup.add(btn1)
    #             # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ read_root –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    #             asyncio.create_task(self.facebook_auth.read_root())
    #             self.bot.send_message(message.chat.id, text="–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {0.link}".format(self.facebook_auth),
    #                                   reply_markup=markup)
    #
    # async def run(self):
    #     await self.bot.polling(none_stop=True, interval=0)

